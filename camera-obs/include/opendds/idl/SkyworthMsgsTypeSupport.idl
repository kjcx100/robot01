/* Generated by opendds_idl version 3.13 (ACE version 6.2a_p15) running on input file SkyworthMsgs.idl */
#ifndef OPENDDS_IDL_GENERATED_SKYWORTHMSGSTYPESUPPORT_IDL_LXHU2G
#define OPENDDS_IDL_GENERATED_SKYWORTHMSGSTYPESUPPORT_IDL_LXHU2G
#define __OPENDDS_IDL_HAS_FIXED
#include "SkyworthMsgs.idl"

#include "dds/DdsDcpsInfrastructure.idl"
#include "dds/DdsDcpsPublication.idl"
#include "dds/DdsDcpsSubscriptionExt.idl"
#include "dds/DdsDcpsTopic.idl"
#include "dds/DdsDcpsTypeSupportExt.idl"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: SkyworthMsgs */



/* Begin STRUCT: EdgePolorPoint */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::EdgePolorPointSeq"
typedef sequence<SkyworthMsgs::EdgePolorPoint> EdgePolorPointSeq;
#else
native EdgePolorPointSeq;
#endif

/** Support topic registration for EdgePolorPoint data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface EdgePolorPointTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for EdgePolorPoint data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface EdgePolorPointDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::EdgePolorPoint instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::EdgePolorPoint instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::EdgePolorPoint instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::EdgePolorPoint instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::EdgePolorPoint instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::EdgePolorPoint instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::EdgePolorPoint instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::EdgePolorPoint instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::EdgePolorPoint key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::EdgePolorPoint instance_data);
};

/** DataReader interface for EdgePolorPoint data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface EdgePolorPointDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout EdgePolorPointSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout EdgePolorPointSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout EdgePolorPointSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout EdgePolorPointSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::EdgePolorPoint received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::EdgePolorPoint received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout EdgePolorPointSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout EdgePolorPointSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout EdgePolorPointSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout EdgePolorPointSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout EdgePolorPointSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout EdgePolorPointSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout EdgePolorPointSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout EdgePolorPointSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout EdgePolorPointSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::EdgePolorPoint key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::EdgePolorPoint instance_data);
};
};

/* End STRUCT: EdgePolorPoint */


/* Begin STRUCT: EdgeXyzPoint */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::EdgeXyzPointSeq"
typedef sequence<SkyworthMsgs::EdgeXyzPoint> EdgeXyzPointSeq;
#else
native EdgeXyzPointSeq;
#endif

/** Support topic registration for EdgeXyzPoint data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface EdgeXyzPointTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for EdgeXyzPoint data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface EdgeXyzPointDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::EdgeXyzPoint instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::EdgeXyzPoint instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::EdgeXyzPoint instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::EdgeXyzPoint instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::EdgeXyzPoint instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::EdgeXyzPoint instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::EdgeXyzPoint instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::EdgeXyzPoint instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::EdgeXyzPoint key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::EdgeXyzPoint instance_data);
};

/** DataReader interface for EdgeXyzPoint data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface EdgeXyzPointDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout EdgeXyzPointSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout EdgeXyzPointSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout EdgeXyzPointSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout EdgeXyzPointSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::EdgeXyzPoint received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::EdgeXyzPoint received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout EdgeXyzPointSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout EdgeXyzPointSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout EdgeXyzPointSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout EdgeXyzPointSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout EdgeXyzPointSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout EdgeXyzPointSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout EdgeXyzPointSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout EdgeXyzPointSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout EdgeXyzPointSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::EdgeXyzPoint key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::EdgeXyzPoint instance_data);
};
};

/* End STRUCT: EdgeXyzPoint */


/* Begin STRUCT: DestXyzPoint */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::DestXyzPointSeq"
typedef sequence<SkyworthMsgs::DestXyzPoint> DestXyzPointSeq;
#else
native DestXyzPointSeq;
#endif

/** Support topic registration for DestXyzPoint data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface DestXyzPointTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for DestXyzPoint data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface DestXyzPointDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::DestXyzPoint instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::DestXyzPoint instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::DestXyzPoint instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::DestXyzPoint instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::DestXyzPoint instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::DestXyzPoint instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::DestXyzPoint instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::DestXyzPoint instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::DestXyzPoint key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::DestXyzPoint instance_data);
};

/** DataReader interface for DestXyzPoint data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface DestXyzPointDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout DestXyzPointSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout DestXyzPointSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout DestXyzPointSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout DestXyzPointSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::DestXyzPoint received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::DestXyzPoint received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout DestXyzPointSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout DestXyzPointSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout DestXyzPointSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout DestXyzPointSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout DestXyzPointSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout DestXyzPointSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout DestXyzPointSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout DestXyzPointSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout DestXyzPointSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::DestXyzPoint key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::DestXyzPoint instance_data);
};
};

/* End STRUCT: DestXyzPoint */


/* Begin TYPEDEF: EdgePolorPointList */


/* End TYPEDEF: EdgePolorPointList */


/* Begin STRUCT: DepthEdgeData */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::DepthEdgeDataSeq"
typedef sequence<SkyworthMsgs::DepthEdgeData> DepthEdgeDataSeq;
#else
native DepthEdgeDataSeq;
#endif

/** Support topic registration for DepthEdgeData data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface DepthEdgeDataTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for DepthEdgeData data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface DepthEdgeDataDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::DepthEdgeData instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::DepthEdgeData instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::DepthEdgeData instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::DepthEdgeData instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::DepthEdgeData instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::DepthEdgeData instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::DepthEdgeData instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::DepthEdgeData instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::DepthEdgeData key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::DepthEdgeData instance_data);
};

/** DataReader interface for DepthEdgeData data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface DepthEdgeDataDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout DepthEdgeDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout DepthEdgeDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout DepthEdgeDataSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout DepthEdgeDataSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::DepthEdgeData received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::DepthEdgeData received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout DepthEdgeDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout DepthEdgeDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout DepthEdgeDataSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout DepthEdgeDataSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout DepthEdgeDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout DepthEdgeDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout DepthEdgeDataSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout DepthEdgeDataSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout DepthEdgeDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::DepthEdgeData key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::DepthEdgeData instance_data);
};
};

/* End STRUCT: DepthEdgeData */


/* Begin STRUCT: UltraTouchData */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::UltraTouchDataSeq"
typedef sequence<SkyworthMsgs::UltraTouchData> UltraTouchDataSeq;
#else
native UltraTouchDataSeq;
#endif

/** Support topic registration for UltraTouchData data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface UltraTouchDataTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for UltraTouchData data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface UltraTouchDataDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::UltraTouchData instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::UltraTouchData instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::UltraTouchData instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::UltraTouchData instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::UltraTouchData instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::UltraTouchData instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::UltraTouchData instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::UltraTouchData instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::UltraTouchData key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::UltraTouchData instance_data);
};

/** DataReader interface for UltraTouchData data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface UltraTouchDataDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout UltraTouchDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout UltraTouchDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout UltraTouchDataSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout UltraTouchDataSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::UltraTouchData received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::UltraTouchData received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout UltraTouchDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout UltraTouchDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout UltraTouchDataSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout UltraTouchDataSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout UltraTouchDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout UltraTouchDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout UltraTouchDataSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout UltraTouchDataSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout UltraTouchDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::UltraTouchData key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::UltraTouchData instance_data);
};
};

/* End STRUCT: UltraTouchData */


/* Begin TYPEDEF: RgbPicData */


/* End TYPEDEF: RgbPicData */


/* Begin STRUCT: RgbPic */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::RgbPicSeq"
typedef sequence<SkyworthMsgs::RgbPic> RgbPicSeq;
#else
native RgbPicSeq;
#endif

/** Support topic registration for RgbPic data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface RgbPicTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for RgbPic data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface RgbPicDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::RgbPic instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::RgbPic instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::RgbPic instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::RgbPic instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::RgbPic instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::RgbPic instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::RgbPic instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::RgbPic instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::RgbPic key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::RgbPic instance_data);
};

/** DataReader interface for RgbPic data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface RgbPicDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout RgbPicSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout RgbPicSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout RgbPicSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout RgbPicSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::RgbPic received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::RgbPic received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout RgbPicSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout RgbPicSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout RgbPicSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout RgbPicSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout RgbPicSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout RgbPicSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout RgbPicSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout RgbPicSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout RgbPicSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::RgbPic key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::RgbPic instance_data);
};
};

/* End STRUCT: RgbPic */


/* Begin TYPEDEF: EdgeXyzPointList */


/* End TYPEDEF: EdgeXyzPointList */


/* Begin STRUCT: ObsData */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::ObsDataSeq"
typedef sequence<SkyworthMsgs::ObsData> ObsDataSeq;
#else
native ObsDataSeq;
#endif

/** Support topic registration for ObsData data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface ObsDataTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for ObsData data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface ObsDataDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::ObsData instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::ObsData instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::ObsData instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::ObsData instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::ObsData instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::ObsData instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::ObsData instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::ObsData instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::ObsData key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::ObsData instance_data);
};

/** DataReader interface for ObsData data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface ObsDataDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout ObsDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout ObsDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout ObsDataSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout ObsDataSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::ObsData received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::ObsData received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout ObsDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout ObsDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout ObsDataSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout ObsDataSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout ObsDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout ObsDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout ObsDataSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout ObsDataSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout ObsDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::ObsData key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::ObsData instance_data);
};
};

/* End STRUCT: ObsData */


/* Begin STRUCT: CleanerStatus */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::CleanerStatusSeq"
typedef sequence<SkyworthMsgs::CleanerStatus> CleanerStatusSeq;
#else
native CleanerStatusSeq;
#endif

/** Support topic registration for CleanerStatus data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface CleanerStatusTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for CleanerStatus data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface CleanerStatusDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::CleanerStatus instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::CleanerStatus instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::CleanerStatus instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::CleanerStatus instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::CleanerStatus instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::CleanerStatus instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::CleanerStatus instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::CleanerStatus instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::CleanerStatus key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::CleanerStatus instance_data);
};

/** DataReader interface for CleanerStatus data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface CleanerStatusDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout CleanerStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout CleanerStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout CleanerStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout CleanerStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::CleanerStatus received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::CleanerStatus received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout CleanerStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout CleanerStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout CleanerStatusSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout CleanerStatusSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout CleanerStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout CleanerStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout CleanerStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout CleanerStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout CleanerStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::CleanerStatus key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::CleanerStatus instance_data);
};
};

/* End STRUCT: CleanerStatus */


/* Begin STRUCT: CleanerCommand */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::CleanerCommandSeq"
typedef sequence<SkyworthMsgs::CleanerCommand> CleanerCommandSeq;
#else
native CleanerCommandSeq;
#endif

/** Support topic registration for CleanerCommand data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface CleanerCommandTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for CleanerCommand data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface CleanerCommandDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::CleanerCommand instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::CleanerCommand instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::CleanerCommand instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::CleanerCommand instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::CleanerCommand instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::CleanerCommand instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::CleanerCommand instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::CleanerCommand instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::CleanerCommand key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::CleanerCommand instance_data);
};

/** DataReader interface for CleanerCommand data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface CleanerCommandDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout CleanerCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout CleanerCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout CleanerCommandSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout CleanerCommandSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::CleanerCommand received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::CleanerCommand received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout CleanerCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout CleanerCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout CleanerCommandSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout CleanerCommandSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout CleanerCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout CleanerCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout CleanerCommandSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout CleanerCommandSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout CleanerCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::CleanerCommand key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::CleanerCommand instance_data);
};
};

/* End STRUCT: CleanerCommand */


/* Begin STRUCT: ElecQuantity */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::ElecQuantitySeq"
typedef sequence<SkyworthMsgs::ElecQuantity> ElecQuantitySeq;
#else
native ElecQuantitySeq;
#endif

/** Support topic registration for ElecQuantity data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface ElecQuantityTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for ElecQuantity data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface ElecQuantityDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::ElecQuantity instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::ElecQuantity instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::ElecQuantity instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::ElecQuantity instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::ElecQuantity instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::ElecQuantity instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::ElecQuantity instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::ElecQuantity instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::ElecQuantity key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::ElecQuantity instance_data);
};

/** DataReader interface for ElecQuantity data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface ElecQuantityDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout ElecQuantitySeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout ElecQuantitySeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout ElecQuantitySeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout ElecQuantitySeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::ElecQuantity received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::ElecQuantity received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout ElecQuantitySeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout ElecQuantitySeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout ElecQuantitySeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout ElecQuantitySeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout ElecQuantitySeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout ElecQuantitySeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout ElecQuantitySeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout ElecQuantitySeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout ElecQuantitySeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::ElecQuantity key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::ElecQuantity instance_data);
};
};

/* End STRUCT: ElecQuantity */


/* Begin STRUCT: EmgStop */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::EmgStopSeq"
typedef sequence<SkyworthMsgs::EmgStop> EmgStopSeq;
#else
native EmgStopSeq;
#endif

/** Support topic registration for EmgStop data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface EmgStopTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for EmgStop data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface EmgStopDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::EmgStop instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::EmgStop instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::EmgStop instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::EmgStop instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::EmgStop instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::EmgStop instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::EmgStop instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::EmgStop instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::EmgStop key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::EmgStop instance_data);
};

/** DataReader interface for EmgStop data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface EmgStopDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout EmgStopSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout EmgStopSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout EmgStopSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout EmgStopSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::EmgStop received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::EmgStop received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout EmgStopSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout EmgStopSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout EmgStopSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout EmgStopSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout EmgStopSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout EmgStopSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout EmgStopSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout EmgStopSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout EmgStopSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::EmgStop key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::EmgStop instance_data);
};
};

/* End STRUCT: EmgStop */


/* Begin STRUCT: SlamStatus */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::SlamStatusSeq"
typedef sequence<SkyworthMsgs::SlamStatus> SlamStatusSeq;
#else
native SlamStatusSeq;
#endif

/** Support topic registration for SlamStatus data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface SlamStatusTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for SlamStatus data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface SlamStatusDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::SlamStatus instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::SlamStatus instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::SlamStatus instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::SlamStatus instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::SlamStatus instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::SlamStatus instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::SlamStatus instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::SlamStatus instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::SlamStatus key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::SlamStatus instance_data);
};

/** DataReader interface for SlamStatus data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface SlamStatusDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout SlamStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout SlamStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout SlamStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout SlamStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::SlamStatus received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::SlamStatus received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout SlamStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout SlamStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout SlamStatusSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout SlamStatusSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout SlamStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout SlamStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout SlamStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout SlamStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout SlamStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::SlamStatus key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::SlamStatus instance_data);
};
};

/* End STRUCT: SlamStatus */


/* Begin STRUCT: SlamCommand */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::SlamCommandSeq"
typedef sequence<SkyworthMsgs::SlamCommand> SlamCommandSeq;
#else
native SlamCommandSeq;
#endif

/** Support topic registration for SlamCommand data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface SlamCommandTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for SlamCommand data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface SlamCommandDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::SlamCommand instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::SlamCommand instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::SlamCommand instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::SlamCommand instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::SlamCommand instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::SlamCommand instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::SlamCommand instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::SlamCommand instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::SlamCommand key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::SlamCommand instance_data);
};

/** DataReader interface for SlamCommand data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface SlamCommandDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout SlamCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout SlamCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout SlamCommandSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout SlamCommandSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::SlamCommand received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::SlamCommand received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout SlamCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout SlamCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout SlamCommandSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout SlamCommandSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout SlamCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout SlamCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout SlamCommandSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout SlamCommandSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout SlamCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::SlamCommand key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::SlamCommand instance_data);
};
};

/* End STRUCT: SlamCommand */


/* Begin STRUCT: SlamInteStatus */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::SlamInteStatusSeq"
typedef sequence<SkyworthMsgs::SlamInteStatus> SlamInteStatusSeq;
#else
native SlamInteStatusSeq;
#endif

/** Support topic registration for SlamInteStatus data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface SlamInteStatusTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for SlamInteStatus data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface SlamInteStatusDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::SlamInteStatus instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::SlamInteStatus instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::SlamInteStatus instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::SlamInteStatus instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::SlamInteStatus instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::SlamInteStatus instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::SlamInteStatus instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::SlamInteStatus instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::SlamInteStatus key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::SlamInteStatus instance_data);
};

/** DataReader interface for SlamInteStatus data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface SlamInteStatusDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout SlamInteStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout SlamInteStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout SlamInteStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout SlamInteStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::SlamInteStatus received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::SlamInteStatus received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout SlamInteStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout SlamInteStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout SlamInteStatusSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout SlamInteStatusSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout SlamInteStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout SlamInteStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout SlamInteStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout SlamInteStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout SlamInteStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::SlamInteStatus key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::SlamInteStatus instance_data);
};
};

/* End STRUCT: SlamInteStatus */


/* Begin STRUCT: SlamInteCommand */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::SlamInteCommandSeq"
typedef sequence<SkyworthMsgs::SlamInteCommand> SlamInteCommandSeq;
#else
native SlamInteCommandSeq;
#endif

/** Support topic registration for SlamInteCommand data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface SlamInteCommandTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for SlamInteCommand data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface SlamInteCommandDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::SlamInteCommand instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::SlamInteCommand instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::SlamInteCommand instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::SlamInteCommand instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::SlamInteCommand instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::SlamInteCommand instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::SlamInteCommand instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::SlamInteCommand instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::SlamInteCommand key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::SlamInteCommand instance_data);
};

/** DataReader interface for SlamInteCommand data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface SlamInteCommandDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout SlamInteCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout SlamInteCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout SlamInteCommandSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout SlamInteCommandSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::SlamInteCommand received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::SlamInteCommand received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout SlamInteCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout SlamInteCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout SlamInteCommandSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout SlamInteCommandSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout SlamInteCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout SlamInteCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout SlamInteCommandSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout SlamInteCommandSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout SlamInteCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::SlamInteCommand key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::SlamInteCommand instance_data);
};
};

/* End STRUCT: SlamInteCommand */


/* Begin STRUCT: PatrolStatus */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::PatrolStatusSeq"
typedef sequence<SkyworthMsgs::PatrolStatus> PatrolStatusSeq;
#else
native PatrolStatusSeq;
#endif

/** Support topic registration for PatrolStatus data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface PatrolStatusTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for PatrolStatus data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface PatrolStatusDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::PatrolStatus instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::PatrolStatus instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::PatrolStatus instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::PatrolStatus instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::PatrolStatus instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::PatrolStatus instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::PatrolStatus instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::PatrolStatus instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::PatrolStatus key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::PatrolStatus instance_data);
};

/** DataReader interface for PatrolStatus data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface PatrolStatusDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout PatrolStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout PatrolStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout PatrolStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout PatrolStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::PatrolStatus received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::PatrolStatus received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout PatrolStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout PatrolStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout PatrolStatusSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout PatrolStatusSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout PatrolStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout PatrolStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout PatrolStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout PatrolStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout PatrolStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::PatrolStatus key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::PatrolStatus instance_data);
};
};

/* End STRUCT: PatrolStatus */


/* Begin STRUCT: PatrolCommand */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::PatrolCommandSeq"
typedef sequence<SkyworthMsgs::PatrolCommand> PatrolCommandSeq;
#else
native PatrolCommandSeq;
#endif

/** Support topic registration for PatrolCommand data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface PatrolCommandTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for PatrolCommand data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface PatrolCommandDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::PatrolCommand instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::PatrolCommand instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::PatrolCommand instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::PatrolCommand instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::PatrolCommand instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::PatrolCommand instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::PatrolCommand instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::PatrolCommand instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::PatrolCommand key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::PatrolCommand instance_data);
};

/** DataReader interface for PatrolCommand data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface PatrolCommandDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout PatrolCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout PatrolCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout PatrolCommandSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout PatrolCommandSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::PatrolCommand received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::PatrolCommand received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout PatrolCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout PatrolCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout PatrolCommandSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout PatrolCommandSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout PatrolCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout PatrolCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout PatrolCommandSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout PatrolCommandSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout PatrolCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::PatrolCommand key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::PatrolCommand instance_data);
};
};

/* End STRUCT: PatrolCommand */


/* Begin STRUCT: CleanStatus */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::CleanStatusSeq"
typedef sequence<SkyworthMsgs::CleanStatus> CleanStatusSeq;
#else
native CleanStatusSeq;
#endif

/** Support topic registration for CleanStatus data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface CleanStatusTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for CleanStatus data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface CleanStatusDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::CleanStatus instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::CleanStatus instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::CleanStatus instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::CleanStatus instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::CleanStatus instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::CleanStatus instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::CleanStatus instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::CleanStatus instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::CleanStatus key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::CleanStatus instance_data);
};

/** DataReader interface for CleanStatus data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface CleanStatusDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout CleanStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout CleanStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout CleanStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout CleanStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::CleanStatus received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::CleanStatus received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout CleanStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout CleanStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout CleanStatusSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout CleanStatusSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout CleanStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout CleanStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout CleanStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout CleanStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout CleanStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::CleanStatus key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::CleanStatus instance_data);
};
};

/* End STRUCT: CleanStatus */


/* Begin STRUCT: CleanCommand */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::CleanCommandSeq"
typedef sequence<SkyworthMsgs::CleanCommand> CleanCommandSeq;
#else
native CleanCommandSeq;
#endif

/** Support topic registration for CleanCommand data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface CleanCommandTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for CleanCommand data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface CleanCommandDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::CleanCommand instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::CleanCommand instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::CleanCommand instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::CleanCommand instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::CleanCommand instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::CleanCommand instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::CleanCommand instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::CleanCommand instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::CleanCommand key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::CleanCommand instance_data);
};

/** DataReader interface for CleanCommand data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface CleanCommandDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout CleanCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout CleanCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout CleanCommandSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout CleanCommandSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::CleanCommand received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::CleanCommand received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout CleanCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout CleanCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout CleanCommandSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout CleanCommandSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout CleanCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout CleanCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout CleanCommandSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout CleanCommandSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout CleanCommandSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::CleanCommand key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::CleanCommand instance_data);
};
};

/* End STRUCT: CleanCommand */


/* Begin TYPEDEF: MapPicData */


/* End TYPEDEF: MapPicData */


/* Begin STRUCT: MapLiveData */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::MapLiveDataSeq"
typedef sequence<SkyworthMsgs::MapLiveData> MapLiveDataSeq;
#else
native MapLiveDataSeq;
#endif

/** Support topic registration for MapLiveData data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface MapLiveDataTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for MapLiveData data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface MapLiveDataDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::MapLiveData instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::MapLiveData instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::MapLiveData instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::MapLiveData instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::MapLiveData instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::MapLiveData instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::MapLiveData instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::MapLiveData instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::MapLiveData key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::MapLiveData instance_data);
};

/** DataReader interface for MapLiveData data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface MapLiveDataDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout MapLiveDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout MapLiveDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout MapLiveDataSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout MapLiveDataSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::MapLiveData received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::MapLiveData received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout MapLiveDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout MapLiveDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout MapLiveDataSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout MapLiveDataSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout MapLiveDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout MapLiveDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout MapLiveDataSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout MapLiveDataSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout MapLiveDataSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::MapLiveData key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::MapLiveData instance_data);
};
};

/* End STRUCT: MapLiveData */


/* Begin STRUCT: SlamManageStatus */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::SlamManageStatusSeq"
typedef sequence<SkyworthMsgs::SlamManageStatus> SlamManageStatusSeq;
#else
native SlamManageStatusSeq;
#endif

/** Support topic registration for SlamManageStatus data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface SlamManageStatusTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for SlamManageStatus data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface SlamManageStatusDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::SlamManageStatus instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::SlamManageStatus instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::SlamManageStatus instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::SlamManageStatus instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::SlamManageStatus instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::SlamManageStatus instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::SlamManageStatus instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::SlamManageStatus instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::SlamManageStatus key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::SlamManageStatus instance_data);
};

/** DataReader interface for SlamManageStatus data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface SlamManageStatusDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout SlamManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout SlamManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout SlamManageStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout SlamManageStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::SlamManageStatus received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::SlamManageStatus received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout SlamManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout SlamManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout SlamManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout SlamManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout SlamManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout SlamManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout SlamManageStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout SlamManageStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout SlamManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::SlamManageStatus key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::SlamManageStatus instance_data);
};
};

/* End STRUCT: SlamManageStatus */


/* Begin STRUCT: SlamManageCmd */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::SlamManageCmdSeq"
typedef sequence<SkyworthMsgs::SlamManageCmd> SlamManageCmdSeq;
#else
native SlamManageCmdSeq;
#endif

/** Support topic registration for SlamManageCmd data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface SlamManageCmdTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for SlamManageCmd data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface SlamManageCmdDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::SlamManageCmd instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::SlamManageCmd instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::SlamManageCmd instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::SlamManageCmd instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::SlamManageCmd instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::SlamManageCmd instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::SlamManageCmd instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::SlamManageCmd instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::SlamManageCmd key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::SlamManageCmd instance_data);
};

/** DataReader interface for SlamManageCmd data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface SlamManageCmdDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout SlamManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout SlamManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout SlamManageCmdSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout SlamManageCmdSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::SlamManageCmd received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::SlamManageCmd received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout SlamManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout SlamManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout SlamManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout SlamManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout SlamManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout SlamManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout SlamManageCmdSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout SlamManageCmdSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout SlamManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::SlamManageCmd key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::SlamManageCmd instance_data);
};
};

/* End STRUCT: SlamManageCmd */


/* Begin STRUCT: PatrolManageStatus */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::PatrolManageStatusSeq"
typedef sequence<SkyworthMsgs::PatrolManageStatus> PatrolManageStatusSeq;
#else
native PatrolManageStatusSeq;
#endif

/** Support topic registration for PatrolManageStatus data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface PatrolManageStatusTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for PatrolManageStatus data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface PatrolManageStatusDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::PatrolManageStatus instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::PatrolManageStatus instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::PatrolManageStatus instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::PatrolManageStatus instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::PatrolManageStatus instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::PatrolManageStatus instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::PatrolManageStatus instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::PatrolManageStatus instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::PatrolManageStatus key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::PatrolManageStatus instance_data);
};

/** DataReader interface for PatrolManageStatus data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface PatrolManageStatusDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout PatrolManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout PatrolManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout PatrolManageStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout PatrolManageStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::PatrolManageStatus received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::PatrolManageStatus received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout PatrolManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout PatrolManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout PatrolManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout PatrolManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout PatrolManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout PatrolManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout PatrolManageStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout PatrolManageStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout PatrolManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::PatrolManageStatus key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::PatrolManageStatus instance_data);
};
};

/* End STRUCT: PatrolManageStatus */


/* Begin STRUCT: PatrolManageCmd */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::PatrolManageCmdSeq"
typedef sequence<SkyworthMsgs::PatrolManageCmd> PatrolManageCmdSeq;
#else
native PatrolManageCmdSeq;
#endif

/** Support topic registration for PatrolManageCmd data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface PatrolManageCmdTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for PatrolManageCmd data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface PatrolManageCmdDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::PatrolManageCmd instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::PatrolManageCmd instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::PatrolManageCmd instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::PatrolManageCmd instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::PatrolManageCmd instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::PatrolManageCmd instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::PatrolManageCmd instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::PatrolManageCmd instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::PatrolManageCmd key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::PatrolManageCmd instance_data);
};

/** DataReader interface for PatrolManageCmd data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface PatrolManageCmdDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout PatrolManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout PatrolManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout PatrolManageCmdSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout PatrolManageCmdSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::PatrolManageCmd received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::PatrolManageCmd received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout PatrolManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout PatrolManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout PatrolManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout PatrolManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout PatrolManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout PatrolManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout PatrolManageCmdSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout PatrolManageCmdSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout PatrolManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::PatrolManageCmd key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::PatrolManageCmd instance_data);
};
};

/* End STRUCT: PatrolManageCmd */


/* Begin STRUCT: CleanManageStatus */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::CleanManageStatusSeq"
typedef sequence<SkyworthMsgs::CleanManageStatus> CleanManageStatusSeq;
#else
native CleanManageStatusSeq;
#endif

/** Support topic registration for CleanManageStatus data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface CleanManageStatusTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for CleanManageStatus data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface CleanManageStatusDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::CleanManageStatus instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::CleanManageStatus instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::CleanManageStatus instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::CleanManageStatus instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::CleanManageStatus instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::CleanManageStatus instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::CleanManageStatus instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::CleanManageStatus instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::CleanManageStatus key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::CleanManageStatus instance_data);
};

/** DataReader interface for CleanManageStatus data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface CleanManageStatusDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout CleanManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout CleanManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout CleanManageStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout CleanManageStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::CleanManageStatus received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::CleanManageStatus received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout CleanManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout CleanManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout CleanManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout CleanManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout CleanManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout CleanManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout CleanManageStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout CleanManageStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout CleanManageStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::CleanManageStatus key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::CleanManageStatus instance_data);
};
};

/* End STRUCT: CleanManageStatus */


/* Begin STRUCT: CleanManageCmd */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::CleanManageCmdSeq"
typedef sequence<SkyworthMsgs::CleanManageCmd> CleanManageCmdSeq;
#else
native CleanManageCmdSeq;
#endif

/** Support topic registration for CleanManageCmd data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface CleanManageCmdTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for CleanManageCmd data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface CleanManageCmdDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::CleanManageCmd instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::CleanManageCmd instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::CleanManageCmd instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::CleanManageCmd instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::CleanManageCmd instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::CleanManageCmd instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::CleanManageCmd instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::CleanManageCmd instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::CleanManageCmd key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::CleanManageCmd instance_data);
};

/** DataReader interface for CleanManageCmd data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface CleanManageCmdDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout CleanManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout CleanManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout CleanManageCmdSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout CleanManageCmdSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::CleanManageCmd received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::CleanManageCmd received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout CleanManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout CleanManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout CleanManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout CleanManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout CleanManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout CleanManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout CleanManageCmdSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout CleanManageCmdSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout CleanManageCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::CleanManageCmd key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::CleanManageCmd instance_data);
};
};

/* End STRUCT: CleanManageCmd */


/* Begin STRUCT: MapLiveCmd */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::MapLiveCmdSeq"
typedef sequence<SkyworthMsgs::MapLiveCmd> MapLiveCmdSeq;
#else
native MapLiveCmdSeq;
#endif

/** Support topic registration for MapLiveCmd data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface MapLiveCmdTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for MapLiveCmd data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface MapLiveCmdDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::MapLiveCmd instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::MapLiveCmd instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::MapLiveCmd instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::MapLiveCmd instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::MapLiveCmd instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::MapLiveCmd instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::MapLiveCmd instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::MapLiveCmd instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::MapLiveCmd key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::MapLiveCmd instance_data);
};

/** DataReader interface for MapLiveCmd data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface MapLiveCmdDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout MapLiveCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout MapLiveCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout MapLiveCmdSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout MapLiveCmdSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::MapLiveCmd received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::MapLiveCmd received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout MapLiveCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout MapLiveCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout MapLiveCmdSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout MapLiveCmdSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout MapLiveCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout MapLiveCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout MapLiveCmdSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout MapLiveCmdSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout MapLiveCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::MapLiveCmd key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::MapLiveCmd instance_data);
};
};

/* End STRUCT: MapLiveCmd */


/* Begin STRUCT: CleanRouterStatus */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::CleanRouterStatusSeq"
typedef sequence<SkyworthMsgs::CleanRouterStatus> CleanRouterStatusSeq;
#else
native CleanRouterStatusSeq;
#endif

/** Support topic registration for CleanRouterStatus data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface CleanRouterStatusTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for CleanRouterStatus data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface CleanRouterStatusDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::CleanRouterStatus instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::CleanRouterStatus instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::CleanRouterStatus instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::CleanRouterStatus instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::CleanRouterStatus instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::CleanRouterStatus instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::CleanRouterStatus instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::CleanRouterStatus instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::CleanRouterStatus key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::CleanRouterStatus instance_data);
};

/** DataReader interface for CleanRouterStatus data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface CleanRouterStatusDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout CleanRouterStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout CleanRouterStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout CleanRouterStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout CleanRouterStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::CleanRouterStatus received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::CleanRouterStatus received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout CleanRouterStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout CleanRouterStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout CleanRouterStatusSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout CleanRouterStatusSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout CleanRouterStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout CleanRouterStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout CleanRouterStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout CleanRouterStatusSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout CleanRouterStatusSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::CleanRouterStatus key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::CleanRouterStatus instance_data);
};
};

/* End STRUCT: CleanRouterStatus */


/* Begin STRUCT: CleanRouterCmd */

module SkyworthMsgs {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "SkyworthMsgs::CleanRouterCmdSeq"
typedef sequence<SkyworthMsgs::CleanRouterCmd> CleanRouterCmdSeq;
#else
native CleanRouterCmdSeq;
#endif

/** Support topic registration for CleanRouterCmd data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface CleanRouterCmdTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for CleanRouterCmd data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface CleanRouterCmdDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in SkyworthMsgs::CleanRouterCmd instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in SkyworthMsgs::CleanRouterCmd instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in SkyworthMsgs::CleanRouterCmd instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in SkyworthMsgs::CleanRouterCmd instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in SkyworthMsgs::CleanRouterCmd instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in SkyworthMsgs::CleanRouterCmd instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in SkyworthMsgs::CleanRouterCmd instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in SkyworthMsgs::CleanRouterCmd instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::CleanRouterCmd key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::CleanRouterCmd instance_data);
};

/** DataReader interface for CleanRouterCmd data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface CleanRouterCmdDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout CleanRouterCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout CleanRouterCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout CleanRouterCmdSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout CleanRouterCmdSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout SkyworthMsgs::CleanRouterCmd received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout SkyworthMsgs::CleanRouterCmd received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout CleanRouterCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout CleanRouterCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout CleanRouterCmdSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout CleanRouterCmdSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout CleanRouterCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout CleanRouterCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout CleanRouterCmdSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout CleanRouterCmdSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout CleanRouterCmdSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout SkyworthMsgs::CleanRouterCmd key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in SkyworthMsgs::CleanRouterCmd instance_data);
};
};

/* End STRUCT: CleanRouterCmd */

/* End MODULE: SkyworthMsgs */
#endif /* OPENDDS_IDL_GENERATED_SKYWORTHMSGSTYPESUPPORT_IDL_LXHU2G */
